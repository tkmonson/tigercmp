Step 1: write findEscapes to set escape variables in ASTs  (ANITA) page 149 in textbook pdf
Step 2: Start creating structures Translate and Frame based on chapters 6 and 7 (SAUMYA)
Step 3: Modify FunEntry and VarEntry based on page 140, and modify Semant to use Translate as in chapter 6 (SAUMYA)
Step 4: Write unEx, unCx, unNx in Translate (TOMMY)
Step 5: Write a function in Translate to translate simple variables (this involves handling static links) (SAUMYA)

Step 6: Modify Semant to use the simplevar function in Translate
Step 7: Write functions in Translate to generate IR for all different kinds of Tiger exps
Step 8: Modify Semant to call Translate functions
Step 9: Do fragment stuff??



IR Functions:

Saumya:
SimpleVar
WhileExp
IfExp
ArrayExp
RecordExp

Tommy:
NilExp
IntExp
OpExp
StringExp

Anita:
SeqExp
AssignExp
BreakExp
CallExp
VarDec

Together:
FunctionDec



FindEscape questions:

- Only have to worry about let statements, forexp, vardec, field
- Similarly to Semant, we check headers first then go through bodies- does this mean that we just look for for loops, lets, etc. and then check the stuff inside of them later?
- confirm: traverse exp checks fields within the exp itself, but what actually traverses tree? (traverseexp pattern matches on exps listed above)
- Why do RecordTys have a list of fields that escape? If we are declaring a record then we do need to traverse the initialization expressions but NOT the fields, don't want to add fields to escEnv
for loop counters CAN escape

fundec tells us we have a new level (depth) level plus one to traverse on body
vardecs add to symbol Table- vardec has ref in it bool ref in pair POINTS TO SAME BOOL REF
varexp - if you come accross the var at a lower level then mark as escaping, if same level then leave it

figure out if we're giving errors for vars that are used before or without declaration in findescapes OR in semant

Record/Array Creation: Done

AssignExps: Just MOVEs

Subscript Expressions:
If array base address is held in temp b, a[i] = MEM(BINOP(PLUS, MEM(b), BINOP(MUL, i, wordsize)))

Field expressions:
Similar to subscript expressions, but instead of an array index we need the offset of the field

Arithmetic:
Mostly simple. Not sure about unary complement.

IfExp:
  -Appel says to unEx both clauses and do MOVES on them
    -If both clauses are Nx, then don't do the MOVES. Just create a SEQ(CJUMP(), truelabel, trueclause, falselabel, falseclause, JUMP to "join" label)

  -QUESTION: In the case that both are Cx, what do we set t and f to be?
  -QUESTION: The book makes it sound like all IfExps should be SEQs...what if the IfExp is an r-value,
    and we need to make it an exp?

Variable definitions:
 - Should we generate Assign statements for each variable in AST,or in IR? --> In IR makes more sense

While loops:
Given translatedBody and translatedTest, my guess is that we do
 Create labels: test, done
 SEQ(test, CJUMP(EQ, translatedTest, CONST 0, done, body), LABEL body, translatedBody, JUMP(NAME test, test::[]), done)
(QUESTION: Just have Drew look at this)

For loops:
Just translate to while loops and translate that


%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | UMINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE

%nonterm  exp | program | fundec | dec | tydec | vardec | ty | arrty | recty | fieldec | let | arrCreate | field
| recCreate | lvalue | decList | assign | expSeq | ltail | funcall | funArgs

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%nonassoc ASSIGN DO OF
%left COMMA
%nonassoc ELSE
%nonassoc THEN
%nonassoc SEMICOLON
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%%

(* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar.
 *)

program	: exp			()

exp: LPAREN exp RPAREN			()
exp: LPAREN expSeq RPAREN			()
expSeq: exp SEMICOLON exp			()
expSeq: expSeq SEMICOLON exp ()

exp: INT          ()
exp: STRING       ()
exp: exp PLUS exp ()
exp: exp MINUS exp ()
exp: exp TIMES exp ()
exp: exp DIVIDE exp ()
exp: exp EQ exp ()
exp: exp NEQ exp ()
exp: exp LT exp ()
exp: exp LE exp ()
exp: exp GT exp ()
exp: exp GE exp ()
exp: IF exp THEN exp ()
exp: IF exp THEN exp ELSE exp ()
exp: NIL ()
exp: LPAREN RPAREN ()
exp: let ()
exp: arrCreate ()
exp: recCreate ()
exp: assign ()
exp: BREAK ()
exp: WHILE exp DO exp ()
exp: FOR ID ASSIGN exp TO exp DO exp ()
exp: lvalue ()
exp: funcall ()
exp: MINUS exp %prec UMINUS ()

dec: tydec ()
dec: vardec ()
dec: fundec ()
decList: dec dec ()
decList: decList dec ()

tydec: TYPE ID EQ ty ()
ty: ID ()
ty: arrty ()
ty: recty ()
arrty: ARRAY OF ID ()
recty: LBRACE fieldec RBRACE  ()
fieldec: fieldec COMMA fieldec ()
fieldec: ID COLON ID ()

vardec: VAR ID COLON ID ASSIGN exp ()
vardec: VAR ID ASSIGN exp ()

fundec: FUNCTION ID LPAREN fieldec RPAREN COLON ID EQ exp ()
fundec: FUNCTION ID LPAREN RPAREN COLON ID EQ exp ()
fundec: FUNCTION ID LPAREN fieldec RPAREN EQ exp ()
fundec: FUNCTION ID LPAREN RPAREN EQ exp ()

field: ID EQ exp ()
field: field COMMA field ()
arrCreate: ID LBRACK exp RBRACK OF exp ()
recCreate: ID LBRACE field RBRACE ()
assign: lvalue ASSIGN exp ()

let: LET dec IN exp END ()
let: LET decList IN exp END ()

funcall: ID LPAREN exp RPAREN ()
funcall: ID LPAREN funArgs RPAREN ()
funArgs: exp COMMA exp ()
funArgs: funArgs COMMA exp ()

lvalue: ID ltail ()
ltail: LBRACK exp RBRACK ()
ltail: DOT ID ()
ltail: ()
